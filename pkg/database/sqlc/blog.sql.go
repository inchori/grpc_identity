// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: blog.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blog WHERE id = ?
`

func (q *Queries) DeleteBlog(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteBlog, id)
	return err
}

const getBlog = `-- name: GetBlog :one
SELECT id, title, content, created_at, updated_at, user FROM blog WHERE id = ?
`

func (q *Queries) GetBlog(ctx context.Context, id uint64) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User,
	)
	return i, err
}

const getBlogs = `-- name: GetBlogs :many
SELECT id, title, content, created_at, updated_at, user FROM blog
`

func (q *Queries) GetBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newBlog = `-- name: NewBlog :execresult
INSERT INTO blog(title, content, user) VALUES (?, ?, ?)
`

type NewBlogParams struct {
	Title   string
	Content sql.NullString
	User    sql.NullInt32
}

func (q *Queries) NewBlog(ctx context.Context, arg NewBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, newBlog, arg.Title, arg.Content, arg.User)
}

const updateBlog = `-- name: UpdateBlog :execresult
UPDATE blog SET title = ?, content = ? WHERE id = ?
`

type UpdateBlogParams struct {
	Title   string
	Content sql.NullString
	ID      uint64
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBlog, arg.Title, arg.Content, arg.ID)
}
